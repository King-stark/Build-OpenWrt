name: Build on self-hosted

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: lede-n1-config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  SERVERCHAN_PUSH: true
  TZ: Asia/Shanghai
  PRODUCT_NAME: lede-openWRT

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Check server configuration
      run: |
        echo "警告⚠"
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo "已知编译成功CPU型号：8370C,8171M"
        echo "已知性能不足CPU型号：8272CL 或者最慢的 E5系列，如果编译的插件较多，建议关闭 重新再来！"
        echo -e "-------------- ------------CPU信息------------------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------" >> deviceinfo.log
        echo "已安装内存详细信息：" >> deviceinfo.log
        sudo lshw -short -C memory | grep GiB 2>&1 | tee deviceinfo.log
        echo -e "\n" >> deviceinfo.log
        echo "-----------------------------硬盘信息---------------------------------------------" >> deviceinfo.log
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n" >> deviceinfo.log
        echo "硬盘详情：" >> deviceinfo.log
        df -Th / 2>&1 | tee deviceinfo.log

    - name: Telegram notification
      if: env.SERVERCHAN_PUSH == 'true'
      run: |
        echo "Devinfo=$(cat deviceinfo.log)" >> $GITHUB_ENV
        MSG="
        🔔 您正在使用 托管的甲骨文 编译固件中,请耐心等待...... ⏳
        编译时间：${{ env.DATE }}
        runner信息：${{ env.Devinfo }}
        " 
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${MSG}" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%m/%d %Y")" >> $GITHUB_ENV

    - name: Cache Toolchain
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        clean: 'false'
        prefix: ${{ github.workspace }}/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8 || make download -j1 V=s 
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(($(nproc)+1)) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
  
    - name: Upload firmware to release
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.DATE1 }} ${{ env.PRODUCT_NAME }}
        allowUpdates: true
        tag: ${{ env.PRODUCT_NAME }}_${{ env.DATE }}
        commit: main
        token: ${{ secrets.TOKEN }}
        artifacts: ${{ env.FIRMWARE }}/*
        body: |
          - 这是底包，非完整固件，定时自动编译
          - 默认IP：192.168.31.2 默认密码：password
          - 当前使用版本:【编译前的最后一次[➦lede源码](https://github.com/coolsnowwolf/lede)更新记录】
          ${{ env.useVersionInfo }}

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 7
        keep_minimum_runs: 7

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}

    - name: Telegram notification
      if: steps.organize.outputs.status == 'success' && env.SERVERCHAN_PUSH == 'true'
      run: |
        MSG="
        亲爱的✨主人✨：
        编译时间：${{ env.DATE }}
        OpenWrt 更新信息：${{ env.useVersionInfo }}
        ${{ env.PRODUCT_NAME }} 编译完成
        
        "
        curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=${MSG}"
