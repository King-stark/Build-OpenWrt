#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build lede_kenzo

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/kenzo-n1-config
  DIY_P1_SH: diy-kenzok1.sh
  DIY_P2_SH: diy-kenzok2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  SERVERCHAN_PUSH: true
  TZ: Asia/Shanghai
  PRODUCT_NAME: lede_kenzo-openWRT

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Check server configuration
      run: |
        echo "Ë≠¶Âëä‚ö†"
        echo "Ëã•ÂàÜÈÖçÁöÑÊúçÂä°Âô®ÊÄßËÉΩ‰∏çË∂≥ÔºåÂä°ÂøÖÂèäÊó∂ÂèñÊ∂àÔºåÈáçÊñ∞ËøêË°åÔºÅ"
        echo "Â∑≤Áü•ÁºñËØëÊàêÂäüCPUÂûãÂè∑Ôºö8370C,8171M"
        echo "Â∑≤Áü•ÊÄßËÉΩ‰∏çË∂≥CPUÂûãÂè∑Ôºö8272CL ÊàñËÄÖÊúÄÊÖ¢ÁöÑ E5Á≥ªÂàóÔºåÂ¶ÇÊûúÁºñËØëÁöÑÊèí‰ª∂ËæÉÂ§öÔºåÂª∫ËÆÆÂÖ≥Èó≠ ÈáçÊñ∞ÂÜçÊù•ÔºÅ"
        echo -e "-------------- ------------CPU‰ø°ÊÅØ------------------------------------------\n"
        echo "CPUÁâ©ÁêÜÊï∞Èáè:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPUÊ†∏ÂøÉÂèäÁâàÊú¨‰ø°ÊÅØÔºö$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------ÂÜÖÂ≠ò‰ø°ÊÅØ-------------------------------------------"
        echo "Â∑≤ÂÆâË£ÖÂÜÖÂ≠òËØ¶ÁªÜ‰ø°ÊÅØÔºö"
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "-----------------------------Á°¨Áõò‰ø°ÊÅØ---------------------------------------------"
        echo -e  "Á°¨ÁõòÊï∞ÈáèÔºö$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "Á°¨ÁõòËØ¶ÊÉÖÔºö"
        df -Th

    - name: Telegram notification
      if: env.SERVERCHAN_PUSH == 'true'
      run: |
        cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c > CPU
        cat /proc/cpuinfo | grep "cpu cores" | uniq >> CPU
        sed -i 's|[[:space:]]||g; s|^.||' CPU && sed -i 's|CPU||g; s|pucores:||' CPU
        CPUNAME="$(awk 'NR==1' CPU)" && CPUCORES="$(awk 'NR==2' CPU)"
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=üîî ÊÇ®Ê≠£Âú®‰ΩøÁî®„Äê${CPUNAME} CPU„Äë„Äê${CPUCORES}Ê†∏ÂøÉ„ÄëÁºñËØëÂõ∫‰ª∂‰∏≠,ËØ∑ËÄêÂøÉÁ≠âÂæÖ...... ‚è≥" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/King-stark/Build-OpenWrt/main/depends/depends-lede)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir 
        df -Th

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%m/%d %Y")" >> $GITHUB_ENV

    - name: Cache Toolchain
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        clean: 'false'
        prefix: ${{ github.workspace }}/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

#    - name: Install feeds
#      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        cat .config|grep luci-app-* 
        make download -j8 || make download -j1 V=s 
        rm -rf $(find ./dl/ -size -1024c)
        df -hT

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(($(nproc)+1)) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd $GITHUB_WORKSPACE/openwrt/bin/packages
        tar -zcvf Packages.tar.gz ./*
        cp Packages.tar.gz $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        cd $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
      run: |
        touch release.txt
        cat >> release.txt <<EOF
        This is OpenWrt Rootfs firmware for Armvirt 64
        * Firmware information
        Default IP: 192.168.31.2
        Default username: root
        Default password: password
        EOF
        echo "::set-output name=status::success"
    
    - name: Upload firmware to release
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE1 }} ${{ env.PRODUCT_NAME }}
        allowUpdates: true
        tag: ${{ env.PRODUCT_NAME }}
        commit: main
        token: ${{ secrets.TOKEN }}
        artifacts: ${{ env.FIRMWARE }}/*
        bodyFile: release.txt

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 30
        keep_minimum_runs: 6

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}

    - name: Telegram notification
      run: |
        MSG="
        ‰∫≤Áà±ÁöÑ‚ú®‰∏ª‰∫∫‚ú®Ôºö
        ${{ env.PRODUCT_NAME }} ÁºñËØëÂÆåÊàê
        ÁºñËØëÊó∂Èó¥Ôºö${{ env.DATE }}
        OpenWrt Êõ¥Êñ∞‰ø°ÊÅØÔºö${{ env.useVersionInfo }}
        
        "
        curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=${MSG}"
